// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PartyKlinest.Infrastructure.Data;

#nullable disable

namespace PartyKlinest.Infrastructure.Migrations
{
    [DbContext(typeof(PartyKlinerDbContext))]
    partial class PartyKlinerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PartyKlinest.ApplicationCore.Entities.Orders.Order", b =>
                {
                    b.Property<long>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OrderId"));

                    b.Property<string>("CleanerId")
                        .HasColumnType("text")
                        .HasColumnName("cleaner_id");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_id");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<decimal>("MaxPrice")
                        .HasColumnType("money")
                        .HasColumnName("max_price");

                    b.Property<int>("MessLevel")
                        .HasColumnType("integer")
                        .HasColumnName("mess_level");

                    b.Property<int>("MinCleanerRating")
                        .HasColumnType("integer")
                        .HasColumnName("min_cleaner_rating");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("OrderId")
                        .HasName("pk_orders");

                    b.HasIndex("CleanerId")
                        .HasDatabaseName("ix_orders_cleaner_id");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_orders_client_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("PartyKlinest.ApplicationCore.Entities.Users.Cleaners.Cleaner", b =>
                {
                    b.Property<string>("CleanerId")
                        .HasColumnType("text")
                        .HasColumnName("cleaner_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("CleanerId")
                        .HasName("pk_cleaners");

                    b.ToTable("cleaners", (string)null);
                });

            modelBuilder.Entity("PartyKlinest.ApplicationCore.Entities.Users.Cleaners.ScheduleEntry", b =>
                {
                    b.Property<long>("ScheduleEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("schedule_entry_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ScheduleEntryId"));

                    b.Property<string>("CleanerId")
                        .HasColumnType("text")
                        .HasColumnName("cleaner_id");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer")
                        .HasColumnName("day_of_week");

                    b.Property<TimeOnly>("End")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end");

                    b.Property<TimeOnly>("Start")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start");

                    b.HasKey("ScheduleEntryId")
                        .HasName("pk_schedule_entries");

                    b.HasIndex("CleanerId")
                        .HasDatabaseName("ix_schedule_entries_cleaner_id");

                    b.ToTable("schedule_entries", (string)null);
                });

            modelBuilder.Entity("PartyKlinest.ApplicationCore.Entities.Users.Client", b =>
                {
                    b.Property<string>("ClientId")
                        .HasColumnType("text")
                        .HasColumnName("client_id");

                    b.HasKey("ClientId")
                        .HasName("pk_clients");

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("PartyKlinest.Infrastructure.Data.KeyValuePairs.DecimalKeyValuePair", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_decimal_key_value_pairs");

                    b.ToTable("decimal_key_value_pairs", (string)null);
                });

            modelBuilder.Entity("PartyKlinest.ApplicationCore.Entities.Orders.Order", b =>
                {
                    b.HasOne("PartyKlinest.ApplicationCore.Entities.Users.Cleaners.Cleaner", "Cleaner")
                        .WithMany()
                        .HasForeignKey("CleanerId")
                        .HasConstraintName("fk_orders_cleaners_cleaner_id");

                    b.HasOne("PartyKlinest.ApplicationCore.Entities.Users.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_clients_client_id");

                    b.OwnsOne("PartyKlinest.ApplicationCore.Entities.Orders.Order.Address#PartyKlinest.ApplicationCore.Entities.Orders.Address", "Address", b1 =>
                        {
                            b1.Property<long>("OrderId")
                                .HasColumnType("bigint")
                                .HasColumnName("order_id");

                            b1.Property<string>("BuildingNumber")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("address_building_number");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("address_city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(90)
                                .HasColumnType("character varying(90)")
                                .HasColumnName("address_country");

                            b1.Property<string>("FlatNumber")
                                .HasColumnType("text")
                                .HasColumnName("address_flat_number");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(18)
                                .HasColumnType("character varying(18)")
                                .HasColumnName("address_postal_code");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(180)
                                .HasColumnType("character varying(180)")
                                .HasColumnName("address_street");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("OrderId")
                                .HasConstraintName("fk_orders_orders_order_id");
                        });

                    b.OwnsOne("PartyKlinest.ApplicationCore.Entities.Orders.Order.CleanersOpinion#PartyKlinest.ApplicationCore.Entities.Orders.Opinions.Opinion", "CleanersOpinion", b1 =>
                        {
                            b1.Property<long>("OrderId")
                                .HasColumnType("bigint")
                                .HasColumnName("order_id");

                            b1.Property<string>("AdditionalInfo")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("cleaners_opinion_additional_info");

                            b1.Property<int>("Rating")
                                .HasColumnType("integer")
                                .HasColumnName("cleaners_opinion_rating");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("OrderId")
                                .HasConstraintName("fk_orders_orders_order_id");
                        });

                    b.OwnsOne("PartyKlinest.ApplicationCore.Entities.Orders.Order.ClientsOpinion#PartyKlinest.ApplicationCore.Entities.Orders.Opinions.Opinion", "ClientsOpinion", b1 =>
                        {
                            b1.Property<long>("OrderId")
                                .HasColumnType("bigint")
                                .HasColumnName("order_id");

                            b1.Property<string>("AdditionalInfo")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("clients_opinion_additional_info");

                            b1.Property<int>("Rating")
                                .HasColumnType("integer")
                                .HasColumnName("clients_opinion_rating");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("OrderId")
                                .HasConstraintName("fk_orders_orders_order_id");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Cleaner");

                    b.Navigation("CleanersOpinion");

                    b.Navigation("Client");

                    b.Navigation("ClientsOpinion");
                });

            modelBuilder.Entity("PartyKlinest.ApplicationCore.Entities.Users.Cleaners.Cleaner", b =>
                {
                    b.OwnsOne("PartyKlinest.ApplicationCore.Entities.Users.Cleaners.OrderFilter", "OrderFilter", b1 =>
                        {
                            b1.Property<string>("CleanerId")
                                .HasColumnType("character varying(40)")
                                .HasColumnName("cleaner_id");

                            b1.Property<int>("MaxMessLevel")
                                .HasColumnType("integer")
                                .HasColumnName("order_filter_max_mess_level");

                            b1.Property<int>("MinClientRating")
                                .HasColumnType("integer")
                                .HasColumnName("order_filter_min_client_rating");

                            b1.Property<decimal>("MinPrice")
                                .HasColumnType("money")
                                .HasColumnName("order_filter_min_price");

                            b1.HasKey("CleanerId");

                            b1.ToTable("cleaners");

                            b1.WithOwner()
                                .HasForeignKey("CleanerId")
                                .HasConstraintName("fk_cleaners_cleaners_cleaner_id");
                        });

                    b.Navigation("OrderFilter")
                        .IsRequired();
                });

            modelBuilder.Entity("PartyKlinest.ApplicationCore.Entities.Users.Cleaners.ScheduleEntry", b =>
                {
                    b.HasOne("PartyKlinest.ApplicationCore.Entities.Users.Cleaners.Cleaner", null)
                        .WithMany("ScheduleEntries")
                        .HasForeignKey("CleanerId")
                        .HasConstraintName("fk_schedule_entries_cleaners_cleaner_id");
                });

            modelBuilder.Entity("PartyKlinest.ApplicationCore.Entities.Users.Cleaners.Cleaner", b =>
                {
                    b.Navigation("ScheduleEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
