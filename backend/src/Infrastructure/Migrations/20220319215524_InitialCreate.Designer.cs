// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PartyKlinest.Infrastructure.Data;

#nullable disable

namespace PartyKlinest.Infrastructure.Migrations
{
    [DbContext(typeof(PartyKlinerDbContext))]
    [Migration("20220319215524_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PartyKlinest.ApplicationCore.Entities.Orders.Address", b =>
                {
                    b.Property<long>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AddressId"));

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("character varying(90)");

                    b.Property<int?>("FlatNumber")
                        .HasColumnType("integer");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(180)
                        .HasColumnType("character varying(180)");

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("PartyKlinest.ApplicationCore.Entities.Orders.Opinions.Opinion", b =>
                {
                    b.Property<long>("OpinionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpinionId"));

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<string>("AfterPhotoUri")
                        .HasColumnType("text");

                    b.Property<string>("BeforePhotoUri")
                        .HasColumnType("text");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("OpinionId");

                    b.ToTable("Opinions");
                });

            modelBuilder.Entity("PartyKlinest.ApplicationCore.Entities.Orders.Order", b =>
                {
                    b.Property<long>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OrderId"));

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CleanerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CleanersOpinionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ClientsOpinionId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("MaxPrice")
                        .HasColumnType("money");

                    b.Property<int>("MessLevel")
                        .HasColumnType("integer");

                    b.Property<int>("MinCleanerRating")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("TimeFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("TimeTo")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("OrderId");

                    b.HasIndex("AddressId");

                    b.HasIndex("CleanerId");

                    b.HasIndex("CleanersOpinionId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientsOpinionId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PartyKlinest.ApplicationCore.Entities.Users.Cleaners.Cleaner", b =>
                {
                    b.Property<long>("CleanerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CleanerId"));

                    b.Property<int>("MaxMessLevel")
                        .HasColumnType("integer");

                    b.Property<int>("MinClientRating")
                        .HasColumnType("integer");

                    b.Property<decimal>("MinPrice")
                        .HasColumnType("money");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("CleanerId");

                    b.ToTable("Cleaners");
                });

            modelBuilder.Entity("PartyKlinest.ApplicationCore.Entities.Users.Cleaners.ScheduleEntry", b =>
                {
                    b.Property<long>("ScheduleEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ScheduleEntryId"));

                    b.Property<long>("CleanerId")
                        .HasColumnType("bigint");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("End")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("Start")
                        .HasColumnType("time without time zone");

                    b.HasKey("ScheduleEntryId");

                    b.HasIndex("CleanerId");

                    b.ToTable("ScheduleEntries");
                });

            modelBuilder.Entity("PartyKlinest.ApplicationCore.Entities.Users.Client", b =>
                {
                    b.Property<long>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ClientId"));

                    b.Property<bool>("IsBanned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("PartyKlinest.ApplicationCore.Entities.Users.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserId"));

                    b.Property<long?>("CleanerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsOrganizer")
                        .HasColumnType("boolean");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("CleanerId");

                    b.HasIndex("ClientId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PartyKlinest.ApplicationCore.Entities.Orders.Order", b =>
                {
                    b.HasOne("PartyKlinest.ApplicationCore.Entities.Orders.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PartyKlinest.ApplicationCore.Entities.Users.Cleaners.Cleaner", "Cleaner")
                        .WithMany()
                        .HasForeignKey("CleanerId");

                    b.HasOne("PartyKlinest.ApplicationCore.Entities.Orders.Opinions.Opinion", "CleanersOpinion")
                        .WithMany()
                        .HasForeignKey("CleanersOpinionId");

                    b.HasOne("PartyKlinest.ApplicationCore.Entities.Users.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PartyKlinest.ApplicationCore.Entities.Orders.Opinions.Opinion", "ClientsOpinion")
                        .WithMany()
                        .HasForeignKey("ClientsOpinionId");

                    b.Navigation("Address");

                    b.Navigation("Cleaner");

                    b.Navigation("CleanersOpinion");

                    b.Navigation("Client");

                    b.Navigation("ClientsOpinion");
                });

            modelBuilder.Entity("PartyKlinest.ApplicationCore.Entities.Users.Cleaners.ScheduleEntry", b =>
                {
                    b.HasOne("PartyKlinest.ApplicationCore.Entities.Users.Cleaners.Cleaner", "Cleaner")
                        .WithMany("ScheduleEntries")
                        .HasForeignKey("CleanerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cleaner");
                });

            modelBuilder.Entity("PartyKlinest.ApplicationCore.Entities.Users.User", b =>
                {
                    b.HasOne("PartyKlinest.ApplicationCore.Entities.Users.Cleaners.Cleaner", "Cleaner")
                        .WithMany()
                        .HasForeignKey("CleanerId");

                    b.HasOne("PartyKlinest.ApplicationCore.Entities.Users.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("Cleaner");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PartyKlinest.ApplicationCore.Entities.Users.Cleaners.Cleaner", b =>
                {
                    b.Navigation("ScheduleEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
